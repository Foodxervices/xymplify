- supplier = order.supplier
- days = supplier.delivery_days
- start_date = supplier.next_available_delivery_date&.to_date&.to_s
- block_dates = [supplier.block_delivery_dates, current_restaurant.block_delivery_dates].reject(&:blank?).join(', ')
- tba = ''
.carts-info-container
  table.table.table-striped.table-order rel=order.id data-kitchen-id=current_kitchen.id

    thead
      tr
        th colspan="4" = link_to_if can?(:read, order.supplier), supplier.name, supplier, remote: true
      tr
        th colspan="4"
          table.request-for-delivery-at invalid=@request_for_delivery_at_invalid
            tr
              td width="120" == 'Delivery Date <abbr title="required">*</abbr>'
              td = text_field_tag :request_delivery_date, order.request_delivery_date.try(:strftime, '%d/%m/%Y'), id: nil, class: 'date-picker', data: { days: days, start_date: start_date, block_dates: block_dates }
              td == "&nbsp; &nbsp; &nbsp;"
              td
            tr
              td Delivery Time
              td = text_field_tag :start_time, order.start_time, id: nil, class: 'time-picker', data: { type: 'start' }
              td style="padding-left: 8px; padding-right: 8px;" to
              td = text_field_tag :end_time, order.end_time, id: nil, class: 'time-picker', data: { type: 'end' }
      tr
        th.name = order.name
        th Quantity
        th UOM
        th
          - if order.valid? && order.status.confirmed?
            .confirmed Confirmed
    tbody
      - order.items.includes(:food_item).each do |item|
        - tba = ' excluded TBA' if item.total_price.to_f == 0
        tr.order-item rel=item.id
          td = link_to_if can?(:read, item.food_item), item.name, item.food_item, remote: true
          td.text-center = item.quantity
          td = item.food_item&.unit
          td.text-right width="60" = price_or_tba(item.total_price)

    tfoot
      - if order.gsts_count != 0
        tr
          td.text-right colspan="3" Subtotal #{tba}
          td.text-right = humanized_money_with_symbol(order.price)
        - order.gsts.each do |gst|
          tr
            td.text-right colspan="3" = "#{gst.name} #{gst.percent}%"
            td.text-right = humanized_money_with_symbol(gst.amount)
      tr
        td.text-right colspan="3" Total #{tba}
        td.text-right = humanized_money_with_symbol(order.price_with_gst)

javascript:
  Foodxervices.carts.info.init();